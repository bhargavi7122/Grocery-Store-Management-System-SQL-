create database Grocery_Store_Managment;
use Grocery_Store_Managment;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from categories;
describe categories;
select * from customers;
describe customers;
select * from supplier;
describe supplier;
select * from employees;
describe employees;
select * from orders;
describe orders;
select * from order_details;
describe order_details;
select * from products;
describe products;
-- Analysis Questions
-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.
-- 1. How many unique customers have placed orders?

select count(distinct cust_id) as unique_customers from orders;

-- 2. Which customers have placed the highest number of orders?

select c.cust_id,c.cust_name, count(o.cust_id) as no_of_orders 
from customers c
join orders o on c.cust_id=o.cust_id 
group by c.cust_id
order by no_of_orders desc
limit 1;

-- 3. What is the total and average purchase value per customer?

select o.cust_id,c.cust_name,
sum(od.total_price) as total_purchase,
avg(od.total_price) as avg_purchase 
from orders o 
join order_details od on o.ord_id=od.ord_id
join customers c on o.cust_id=c.cust_id
group by o.cust_id;

-- 4. Who are the top 5 customers by total purchase amount?

select o.cust_id,c.cust_name,
sum(od.total_price) as total_purchase
from orders o 
join order_details od on o.ord_id=od.ord_id
join customers c on o.cust_id=c.cust_id
group by o.cust_id
order by total_purchase desc
limit 5;


-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.

-- 5. How many products exist in each category?

select c.cat_id,c.cat_name,count(p.prod_id)
from categories c
left join products p
on c.cat_id=p.cat_id
group by cat_id;

-- 6. What is the average price of products by category?

select c.cat_name,avg(p.price) 
from categories c
join products p
on c.cat_id=p.cat_id
group by cat_name;

-- 7. Which products have the highest total sales volume (by quantity)?
select p.prod_name,sum(od.quantity) as total_high_sales
from products p
join order_details od on p.prod_id=od.prod_id
group by prod_name
order by total_high_sales desc
limit 1;

-- 8. What is the total revenue generated by each product?

select sum(o.total_price) as total_revenue, p.prod_name
from order_details o
left Join products p on o.prod_id=p.prod_id 
group by prod_name; 

-- 9. How do product sales vary by category and supplier?

select c.cat_name,s.sup_name,sum(o.total_price) 
as total_sales
from 
	order_details o
join
	products p on o.prod_id=p.prod_id
join
	categories c on p.cat_id=c.cat_id
join
	supplier s on p.sup_id=s.sup_id
group by c.cat_name,s.sup_name;


-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time.

-- 10. How many orders have been placed in total?
select count(*) as total_orders  
from orders;

-- 11. What is the average value per order?
select avg(total_price) from order_details;
			-- Or --
select sum(total_price) / count(distinct ord_id) as avg_order_value
from order_details;

-- 12. On which dates were the most orders placed?

select order_date,count(ord_id) as orders_count
from orders
group by order_date
order by orders_count desc
limit 1;

-- 13. How do order patterns vary across weekdays and weekends?
update orders 
set order_date = date_format(str_to_date(order_date,'%Y-%m-%d'),'%m/%d/%Y');

select
	DAYNAME(STR_TO_DATE(order_date,'%m/%d/%Y')) as weekday,
	MONTHNAME(STR_TO_DATE(order_date,'%m/%d/%Y')) as month,
    COUNT(ord_id) as total_orders
from 
	orders
group by weekday, month
order by weekday, month;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.

-- 14. How many suppliers are there in the database?
select count(*) from supplier; 

-- 15. Which supplier provides the most products?

select s.sup_id,sup_name,count(p.prod_id) as product_count 
from supplier s
join products p on s.sup_id=p.sup_id
group by s.sup_id
order by product_count desc
limit 1;

-- 16. What is the average price of products from each supplier?

select s.sup_id,s.sup_name,avg(p.price)
from products p
join supplier s on s.sup_id=p.sup_id
group by s.sup_id;

-- 17. Which suppliers contribute the most to total product sales (by revenue)?
select s.sup_id,s.sup_name,sum(od.total_price) as total_revenue
from supplier s
join products p on s.sup_id=p.sup_id
join order_details od on od.prod_id=p.prod_id
group by sup_id
order by total_revenue desc
limit 1;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.

-- 18. How many employees have processed orders?
SELECT emp_id,COUNT(*) AS total_orders_processed
FROM orders
GROUP BY emp_id
ORDER BY total_orders_processed DESC;
				-- or 
select count(distinct emp_id) 
from orders;

-- 19. What is the total sales value processed by each employee?
select e.emp_id,e.emp_name,sum(od.total_price) as total_sales
from employees e 
join orders o on e.emp_id=o.emp_id
join order_details od on o.ord_id=od.ord_id
group by e.emp_id
order by total_sales desc;

-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.

-- 20. What is the relationship between quantity ordered and total price?

select quantity,(total_price*quantity) as total_price
from order_details;
		-- or 
select quantity,avg(od.total_price) as avg_total_price,
count(*) as order_count 
from order_details od 
group by quantity
order by quantity;

-- 21. What is the average quantity ordered per product?
select p.prod_id,p.prod_name,
avg(od.quantity) as avg_quantity_ordered
from products p 
join order_details od on p.prod_id=od.prod_id
group by p.prod_id
order by avg_quantity_ordered desc;
			-- or 
select p.prod_id,p.prod_name,count(od.ord_id) as total_orders,
avg(od.quantity) as avg_quantity_ordered
from products p 
join order_details od on p.prod_id=od.prod_id
group by p.prod_id
order by avg_quantity_ordered desc;

-- 22. How does the unit price vary across products and orders?
SELECT p.prod_id,p.prod_name,avg(od.each_price) as avg_unit_price
FROM products p
JOIN order_details od ON od.prod_id = p.prod_id
group by p.prod_id,p.prod_name
ORDER BY avg_unit_price;
			-- or 
select p.prod_id,p.prod_name,od.each_price as unit_price,
count(od.ord_id)  as times_ordered 
from products p 
join order_details od on p.prod_id=od.prod_id
group by p.prod_id,od.each_price
order by p.prod_id,od.each_price;
